var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc","$window",function(t){t.$on("login",function(n,e){t.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location","$window",function(t,n,e){t.login=function(o,r){n.login(o,r).then(function(n){t.$emit("login",n),e.path("/")},function(){t.errorMsg="Incorrect username/password"})}}]),angular.module("app").controller("QuestionsCtrl",["$scope","QuestionsSvc","$location",function(t,n,e){t.askQuestion=function(){n.create({username:t.username,title:t.questionTitle,body:t.questionBody}).success(function(n){t.questions.unshift(n),t.questionBody=null,t.questionTitle=null,e.path("/")}).error(function(){t.errorMsg="All fields must be filled out"})},n.fetch().success(function(n){t.questions=n})}]),angular.module("app").service("QuestionsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/questions")},this.create=function(n){return t.post("/api/questions",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(t,n,e){t.register=function(o,r){n.register(o,r).then(function(n){t.$emit("login",n),e.path("/")})}}]),app.config(["$routeProvider",function(t){t.when("/",{controller:"QuestionsCtrl",templateUrl:"questions.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/ask",{controller:"QuestionsCtrl",templateUrl:"ask.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"})}]),angular.module("app").service("UserSvc",["$http","$window",function(t,n){var e=this;e.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},e.login=function(o,r){return t.post("/api/sessions",{username:o,password:r}).then(function(o){return e.token=o.data.token,n.sessionStorage.token=o.data,t.defaults.headers.common["X-Auth"]=o.data,e.getUser()})},e.register=function(n,o){return t.post("/api/users",{username:n,password:o}).then(function(){return e.login(n,o)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsIkFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicXVlc3Rpb25zLmN0cmwuanMiLCJxdWVzdGlvbnMuc3ZjLmpzIiwicmVnaXN0ZXIuY3RybC5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTdmMiLCIkbG9jYXRpb24iLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwiJGVtaXQiLCJwYXRoIiwiZXJyb3JNc2ciLCJRdWVzdGlvbnNTdmMiLCJhc2tRdWVzdGlvbiIsImNyZWF0ZSIsInRpdGxlIiwicXVlc3Rpb25UaXRsZSIsImJvZHkiLCJxdWVzdGlvbkJvZHkiLCJzdWNjZXNzIiwicXVlc3Rpb24iLCJxdWVzdGlvbnMiLCJ1bnNoaWZ0IiwiZXJyb3IiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJwb3N0IiwicmVnaXN0ZXIiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsIiR3aW5kb3ciLCJzdmMiLCJnZXRVc2VyIiwicmVzcG9uc2UiLCJkYXRhIiwidmFsIiwidG9rZW4iLCJzZXNzaW9uU3RvcmFnZSIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBQUEsS0FBQUMsUUFBQUMsT0FBQSxPQUNBLFdDREFELFNBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFVBQUEsVUFBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsT0NIQU4sUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFlBQUEsVUFBQSxTQUFBQyxFQUFBSyxFQUFBQyxHQUNBTixFQUFBTyxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FKLEVBQUFFLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQVAsR0FDQUgsRUFBQVcsTUFBQSxRQUFBUixHQUNBRyxFQUFBTSxLQUFBLE1BR0EsV0FDQVosRUFBQWEsU0FBQSxvQ0NWQWhCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxpQkFBQSxTQUFBLGVBQUEsWUFBQSxTQUFBQyxFQUFBYyxFQUFBUixHQUNBTixFQUFBZSxZQUFBLFdBQ0FELEVBQUFFLFFBQ0FSLFNBQUFSLEVBQUFRLFNBQ0FTLE1BQUFqQixFQUFBa0IsY0FDQUMsS0FBQW5CLEVBQUFvQixlQUVBQyxRQUFBLFNBQUFDLEdBQ0F0QixFQUFBdUIsVUFBQUMsUUFBQUYsR0FDQXRCLEVBQUFvQixhQUFBLEtBQ0FwQixFQUFBa0IsY0FBQSxLQUNBWixFQUFBTSxLQUFBLE9BRUFhLE1BQUEsV0FDQXpCLEVBQUFhLFNBQUEsbUNBSUFDLEVBQUFZLFFBQ0FMLFFBQUEsU0FBQUUsR0FDQXZCLEVBQUF1QixVQUFBQSxPQ3JCQTFCLFFBQUFDLE9BQUEsT0FDQTZCLFFBQUEsZ0JBQUEsUUFBQSxTQUFBQyxHQUNBQyxLQUFBSCxNQUFBLFdBQ0EsTUFBQUUsR0FBQUUsSUFBQSxtQkFFQUQsS0FBQWIsT0FBQSxTQUFBTSxHQUNBLE1BQUFNLEdBQUFHLEtBQUEsaUJBQUFULE9DTkF6QixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsZ0JBQUEsU0FBQSxVQUFBLFlBQUEsU0FBQUMsRUFBQUssRUFBQUMsR0FDQU4sRUFBQWdDLFNBQUEsU0FBQXhCLEVBQUFDLEdBQ0FKLEVBQUEyQixTQUFBeEIsRUFBQUMsR0FDQUMsS0FBQSxTQUFBUCxHQUNBSCxFQUFBVyxNQUFBLFFBQUFSLEdBQ0FHLEVBQUFNLEtBQUEsV0NOQWhCLElBQUFxQyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FBQXBDLFdBQUEsZ0JBQUFxQyxZQUFBLG1CQUNBRCxLQUFBLFVBQUFwQyxXQUFBLFlBQUFxQyxZQUFBLGVBQ0FELEtBQUEsUUFBQXBDLFdBQUEsZ0JBQUFxQyxZQUFBLGFBQ0FELEtBQUEsYUFBQXBDLFdBQUEsZUFBQXFDLFlBQUEscUJDTEF2QyxRQUFBQyxPQUFBLE9BQ0E2QixRQUFBLFdBQUEsUUFBQSxVQUFBLFNBQUFDLEVBQUFTLEdBQ0EsR0FBQUMsR0FBQVQsSUFDQVMsR0FBQUMsUUFBQSxXQUNBLE1BQUFYLEdBQUFFLElBQUEsY0FDQXBCLEtBQUEsU0FBQThCLEdBQ0EsTUFBQUEsR0FBQUMsUUFJQUgsRUFBQS9CLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBbUIsR0FBQUcsS0FBQSxpQkFDQXZCLFNBQUFBLEVBQUFDLFNBQUFBLElBQ0FDLEtBQUEsU0FBQWdDLEdBSUEsTUFIQUosR0FBQUssTUFBQUQsRUFBQUQsS0FBQUUsTUFDQU4sRUFBQU8sZUFBQUQsTUFBQUQsRUFBQUQsS0FDQWIsRUFBQWlCLFNBQUFDLFFBQUFDLE9BQUEsVUFBQUwsRUFBQUQsS0FDQUgsRUFBQUMsYUFJQUQsRUFBQU4sU0FBQSxTQUFBeEIsRUFBQUMsR0FDQSxNQUFBbUIsR0FBQUcsS0FBQSxjQUNBdkIsU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUMsS0FBQSxXQUNBLE1BQUE0QixHQUFBL0IsTUFBQUMsRUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG5cdFwibmdSb3V0ZVwiXG5dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMsICR3aW5kb3cpIHtcblx0JHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xuXHRcdCRzY29wZS5jdXJyZW50VXNlciA9IHVzZXJcblx0fSlcblxuXHQvLyBpZiAoJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS50b2tlbikgeyBcblx0Ly8gXHRVc2VyU3ZjLmdldFVzZXIoKVxuXHQvLyB9XG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMsICRsb2NhdGlvbiwgJHdpbmRvdykge1xuXHQkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVzZXIpe1xuXHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpXG5cdFx0XHQkbG9jYXRpb24ucGF0aCgnLycpXG5cblx0XHR9LFxuXHRcdGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnSW5jb3JyZWN0IHVzZXJuYW1lL3Bhc3N3b3JkJ1xuXHRcdH0pXG5cdH1cblxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdRdWVzdGlvbnNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgUXVlc3Rpb25zU3ZjLCAkbG9jYXRpb24pIHtcbiAgJHNjb3BlLmFza1F1ZXN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgUXVlc3Rpb25zU3ZjLmNyZWF0ZSh7XG4gICAgICAgIHVzZXJuYW1lOiAkc2NvcGUudXNlcm5hbWUsXG4gICAgICAgIHRpdGxlOiBcdCAgJHNjb3BlLnF1ZXN0aW9uVGl0bGUsXG4gICAgICAgIGJvZHk6ICAgICAkc2NvcGUucXVlc3Rpb25Cb2R5XG4gICAgICB9KVxuICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgICAgICRzY29wZS5xdWVzdGlvbnMudW5zaGlmdChxdWVzdGlvbilcbiAgICAgICAgJHNjb3BlLnF1ZXN0aW9uQm9keSA9IG51bGxcbiAgICAgICAgJHNjb3BlLnF1ZXN0aW9uVGl0bGUgPSBudWxsXG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJylcbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcblx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnQWxsIGZpZWxkcyBtdXN0IGJlIGZpbGxlZCBvdXQnXG5cdCB9KVxuICB9XG5cbiAgUXVlc3Rpb25zU3ZjLmZldGNoKClcbiAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHF1ZXN0aW9ucykge1xuICAgICRzY29wZS5xdWVzdGlvbnMgPSBxdWVzdGlvbnNcbiAgfSlcbn0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUXVlc3Rpb25zU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9xdWVzdGlvbnMnKVxuICB9XG4gIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcXVlc3Rpb25zJywgcXVlc3Rpb24pXG4gIH1cbn0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2YywgJGxvY2F0aW9uKSB7XG4gICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICBVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgXHQkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcilcblx0XHQkbG9jYXRpb24ucGF0aCgnLycpXG4gICAgfSlcbiAgfVxufSlcbiIsImFwcC5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdCRyb3V0ZVByb3ZpZGVyXG5cdC53aGVuKCcvJywgeyBjb250cm9sbGVyOiAnUXVlc3Rpb25zQ3RybCcsIHRlbXBsYXRlVXJsOiAncXVlc3Rpb25zLmh0bWwnIH0pXG5cdC53aGVuKCcvbG9naW4nLCB7IGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnIH0pXG5cdC53aGVuKCcvYXNrJywgeyBjb250cm9sbGVyOiAnUXVlc3Rpb25zQ3RybCcsIHRlbXBsYXRlVXJsOiAnYXNrLmh0bWwnIH0pXG5cdC53aGVuKCcvcmVnaXN0ZXInLCB7IGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnIH0pXG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbiAoJGh0dHAsICR3aW5kb3cpIHtcblx0dmFyIHN2YyA9IHRoaXNcblx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdHJldHVybiByZXNwb25zZS5kYXRhXG5cdFx0fSlcblx0fVxuXG5cdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fSkudGhlbihmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRzdmMudG9rZW4gPSB2YWwuZGF0YS50b2tlblxuXHRcdFx0JHdpbmRvdy5zZXNzaW9uU3RvcmFnZS50b2tlbiA9IHZhbC5kYXRhXG5cdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YVxuXHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKClcblx0XHR9KVxuXHR9XG5cblx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHQgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG5cdCAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG5cdCAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdCAgICB9KVxuICBcdH1cblxufSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=